{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotEnoughETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__WithdrawCallFailed",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc95e17beda8e879e5b6fef507aff9e61047de406d04b643267f11cc82a83140c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "982890",
    "logsBloom": "0x
    "blockHash": "0x1a78e7e8ec9f3c63382240d9c2e65e164f30f50e9a8e5696f831ad03e95dca26",
    "transactionHash": "0xc95e17beda8e879e5b6fef507aff9e61047de406d04b643267f11cc82a83140c",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "982890",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "351f18b3c1c9d66ed443730c384685df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__WithdrawCallFailed\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Samuel Vwede\",\"kind\":\"dev\",\"methods\":{},\"title\":\"FundMe Contract for crowdFunding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\nerror FundMe__WithdrawCallFailed();\\nerror FundMe__NotEnoughETH();\\n\\n\\n/**\\n * @title FundMe Contract for crowdFunding\\n * @author Samuel Vwede\\n *\\n */\\ncontract FundMe {\\n    // Type decalaration\\n    using PriceConverter for uint256;\\n    // storage variable\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n    \\n    constructor(address s_priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed =  AggregatorV3Interface(s_priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    function fund() public payable {\\n        if(!(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD)){\\n            revert FundMe__NotEnoughETH();\\n        }\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    \\n    function withdraw() public payable onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        // reset funders array\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n         if(!callSuccess){\\n            revert FundMe__WithdrawCallFailed();\\n        }\\n        // require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n     function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory l_funders = s_funders;\\n\\n        for (uint256 funderIndex=0; funderIndex < l_funders.length; funderIndex++){\\n            address funder = l_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        // reset funders array\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        if(!callSuccess){\\n            revert FundMe__WithdrawCallFailed();\\n        }\\n        // require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // getters\\n\\n    function getOwner() public view returns(address){\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns(address){\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns(uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\\n\",\"keccak256\":\"0x4621452c397845570537fddc380090b98f6f5e3b708f83cea635de64206cde50\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x4939ca9eeabf7b97af75b77bcec602cf23b7b2e09065f8bb50180ddedb4be3ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620011e7380380620011e7833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6110686200017f6000396000818161032c0152818161057201526105c201526110686000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100df578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a89565b6102e2565b6040516100cc9190610acf565b60405180910390f35b6100dd61032a565b005b3480156100eb57600080fd5b506100f4610561565b6040516101019190610acf565b60405180910390f35b34801561011657600080fd5b5061011f61056e565b60405161012c9190610af9565b60405180910390f35b34801561014157600080fd5b5061014a610596565b6040516101579190610b73565b60405180910390f35b6101686101b1565b005b6101726105c0565b005b34801561018057600080fd5b5061019b60048036038101906101969190610bba565b61085b565b6040516101a89190610af9565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108a390919063ffffffff16565b1015610228576040517fb514e4ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102769190610c16565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103af576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561045a576000600182815481106103d5576103d4610c6c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045290610c9b565b9150506103b2565b50600067ffffffffffffffff81111561047657610475610ce4565b5b6040519080825280602002602001820160405280156104a45781602001602082028036833780820191505090505b50600190805190602001906104ba92919061097f565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104e190610d44565b60006040518083038185875af1925050503d806000811461051e576040519150601f19603f3d011682016040523d82523d6000602084013e610523565b606091505b505090508061055e576040517fbeccced600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610645576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106c957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161067f575b5050505050905060005b81518110156107535760008282815181106106f1576106f0610c6c565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074b90610c9b565b9150506106d3565b50600067ffffffffffffffff81111561076f5761076e610ce4565b5b60405190808252806020026020018201604052801561079d5781602001602082028036833780820191505090505b50600190805190602001906107b392919061097f565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107da90610d44565b60006040518083038185875af1925050503d8060008114610817576040519150601f19603f3d011682016040523d82523d6000602084013e61081c565b606091505b5050905080610857576040517fbeccced600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60006001828154811061087157610870610c6c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108af836108df565b90506000670de0b6b3a764000085836108c89190610d59565b6108d29190610de2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561092857600080fd5b505afa15801561093c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109609190610ea0565b5050509150506402540be400816109779190610f1b565b915050919050565b8280548282559060005260206000209081019282156109f8579160200282015b828111156109f75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061099f565b5b509050610a059190610a09565b5090565b5b80821115610a22576000816000905550600101610a0a565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5682610a2b565b9050919050565b610a6681610a4b565b8114610a7157600080fd5b50565b600081359050610a8381610a5d565b92915050565b600060208284031215610a9f57610a9e610a26565b5b6000610aad84828501610a74565b91505092915050565b6000819050919050565b610ac981610ab6565b82525050565b6000602082019050610ae46000830184610ac0565b92915050565b610af381610a4b565b82525050565b6000602082019050610b0e6000830184610aea565b92915050565b6000819050919050565b6000610b39610b34610b2f84610a2b565b610b14565b610a2b565b9050919050565b6000610b4b82610b1e565b9050919050565b6000610b5d82610b40565b9050919050565b610b6d81610b52565b82525050565b6000602082019050610b886000830184610b64565b92915050565b610b9781610ab6565b8114610ba257600080fd5b50565b600081359050610bb481610b8e565b92915050565b600060208284031215610bd057610bcf610a26565b5b6000610bde84828501610ba5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c2182610ab6565b9150610c2c83610ab6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c6157610c60610be7565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ca682610ab6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cd957610cd8610be7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d2e600083610d13565b9150610d3982610d1e565b600082019050919050565b6000610d4f82610d21565b9150819050919050565b6000610d6482610ab6565b9150610d6f83610ab6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610da857610da7610be7565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ded82610ab6565b9150610df883610ab6565b925082610e0857610e07610db3565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e3281610e13565b8114610e3d57600080fd5b50565b600081519050610e4f81610e29565b92915050565b6000819050919050565b610e6881610e55565b8114610e7357600080fd5b50565b600081519050610e8581610e5f565b92915050565b600081519050610e9a81610b8e565b92915050565b600080600080600060a08688031215610ebc57610ebb610a26565b5b6000610eca88828901610e40565b9550506020610edb88828901610e76565b9450506040610eec88828901610e8b565b9350506060610efd88828901610e8b565b9250506080610f0e88828901610e40565b9150509295509295909350565b6000610f2682610e55565b9150610f3183610e55565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f7057610f6f610be7565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610fad57610fac610be7565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610fea57610fe9610be7565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561102757611026610be7565b5b82820290509291505056fea2646970667358221220df5cda63be82b8c83677211125a2cddd51e60eabf40a7f427927a9f8ac7b087964736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100df578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a89565b6102e2565b6040516100cc9190610acf565b60405180910390f35b6100dd61032a565b005b3480156100eb57600080fd5b506100f4610561565b6040516101019190610acf565b60405180910390f35b34801561011657600080fd5b5061011f61056e565b60405161012c9190610af9565b60405180910390f35b34801561014157600080fd5b5061014a610596565b6040516101579190610b73565b60405180910390f35b6101686101b1565b005b6101726105c0565b005b34801561018057600080fd5b5061019b60048036038101906101969190610bba565b61085b565b6040516101a89190610af9565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108a390919063ffffffff16565b1015610228576040517fb514e4ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102769190610c16565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103af576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561045a576000600182815481106103d5576103d4610c6c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045290610c9b565b9150506103b2565b50600067ffffffffffffffff81111561047657610475610ce4565b5b6040519080825280602002602001820160405280156104a45781602001602082028036833780820191505090505b50600190805190602001906104ba92919061097f565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104e190610d44565b60006040518083038185875af1925050503d806000811461051e576040519150601f19603f3d011682016040523d82523d6000602084013e610523565b606091505b505090508061055e576040517fbeccced600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610645576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106c957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161067f575b5050505050905060005b81518110156107535760008282815181106106f1576106f0610c6c565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074b90610c9b565b9150506106d3565b50600067ffffffffffffffff81111561076f5761076e610ce4565b5b60405190808252806020026020018201604052801561079d5781602001602082028036833780820191505090505b50600190805190602001906107b392919061097f565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107da90610d44565b60006040518083038185875af1925050503d8060008114610817576040519150601f19603f3d011682016040523d82523d6000602084013e61081c565b606091505b5050905080610857576040517fbeccced600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60006001828154811061087157610870610c6c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108af836108df565b90506000670de0b6b3a764000085836108c89190610d59565b6108d29190610de2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561092857600080fd5b505afa15801561093c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109609190610ea0565b5050509150506402540be400816109779190610f1b565b915050919050565b8280548282559060005260206000209081019282156109f8579160200282015b828111156109f75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061099f565b5b509050610a059190610a09565b5090565b5b80821115610a22576000816000905550600101610a0a565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5682610a2b565b9050919050565b610a6681610a4b565b8114610a7157600080fd5b50565b600081359050610a8381610a5d565b92915050565b600060208284031215610a9f57610a9e610a26565b5b6000610aad84828501610a74565b91505092915050565b6000819050919050565b610ac981610ab6565b82525050565b6000602082019050610ae46000830184610ac0565b92915050565b610af381610a4b565b82525050565b6000602082019050610b0e6000830184610aea565b92915050565b6000819050919050565b6000610b39610b34610b2f84610a2b565b610b14565b610a2b565b9050919050565b6000610b4b82610b1e565b9050919050565b6000610b5d82610b40565b9050919050565b610b6d81610b52565b82525050565b6000602082019050610b886000830184610b64565b92915050565b610b9781610ab6565b8114610ba257600080fd5b50565b600081359050610bb481610b8e565b92915050565b600060208284031215610bd057610bcf610a26565b5b6000610bde84828501610ba5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c2182610ab6565b9150610c2c83610ab6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c6157610c60610be7565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ca682610ab6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cd957610cd8610be7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d2e600083610d13565b9150610d3982610d1e565b600082019050919050565b6000610d4f82610d21565b9150819050919050565b6000610d6482610ab6565b9150610d6f83610ab6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610da857610da7610be7565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ded82610ab6565b9150610df883610ab6565b925082610e0857610e07610db3565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e3281610e13565b8114610e3d57600080fd5b50565b600081519050610e4f81610e29565b92915050565b6000819050919050565b610e6881610e55565b8114610e7357600080fd5b50565b600081519050610e8581610e5f565b92915050565b600081519050610e9a81610b8e565b92915050565b600080600080600060a08688031215610ebc57610ebb610a26565b5b6000610eca88828901610e40565b9550506020610edb88828901610e76565b9450506040610eec88828901610e8b565b9350506060610efd88828901610e8b565b9250506080610f0e88828901610e40565b9150509295509295909350565b6000610f2682610e55565b9150610f3183610e55565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f7057610f6f610be7565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610fad57610fac610be7565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610fea57610fe9610be7565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561102757611026610be7565b5b82820290509291505056fea2646970667358221220df5cda63be82b8c83677211125a2cddd51e60eabf40a7f427927a9f8ac7b087964736f6c63430008080033",
  "devdoc": {
    "author": "Samuel Vwede",
    "kind": "dev",
    "methods": {},
    "title": "FundMe Contract for crowdFunding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 78,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}